<controls:MetroWindow x:Class="Movselex.Views.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
		xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
		xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
		xmlns:v="clr-namespace:Movselex.Views"
		xmlns:vm="clr-namespace:Movselex.ViewModels"
		xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
		xmlns:prop="clr-namespace:Movselex.Properties"
		Title="Movselex" Height="600" Width="1100"
		GlowBrush="{DynamicResource AccentColorBrush}"
		TitleCaps="False" WindowStartupLocation="CenterScreen"
		>

	<Window.DataContext>
		<vm:MainWindowViewModel/>
	</Window.DataContext>

	<Window.Resources>
		<Style TargetType="Label" x:Key="Header">
			<Setter Property="FontSize" Value="20" />
		</Style>
		<Style TargetType="Label" x:Key="Item">
			<Setter Property="FontSize" Value="15" />
		</Style>
	</Window.Resources>

	<i:Interaction.Triggers>

		<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
		<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
		<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

		<!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
		<i:EventTrigger EventName="ContentRendered">
			<l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
		</i:EventTrigger>

		<!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
		<i:EventTrigger EventName="Closed">
			<l:DataContextDisposeAction/>
		</i:EventTrigger>

		<!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

	</i:Interaction.Triggers>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition />
			<RowDefinition />
			<RowDefinition />
			<RowDefinition />
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="Auto" />
			<ColumnDefinition Width="Auto" />
			<ColumnDefinition  />
			<ColumnDefinition Width="Auto" />
			<ColumnDefinition Width="Auto"/>
		</Grid.ColumnDefinitions>
		
		<!-- Header -->
		<StackPanel Grid.Row="0" Grid.ColumnSpan="3" Orientation="Horizontal" >
			<Label Content="{x:Static prop:Resources.NowPlayingLabel }" Style="{StaticResource Header}" Margin="5"></Label>
			<Label Content="{Binding NowPlayingTitle}" Style="{StaticResource Header}" Margin="0,5,5,5"></Label>
		</StackPanel>
		<Label Grid.Row="0" Grid.Column="3" Grid.ColumnSpan="2" Content="00:00/00:00" Style="{StaticResource Header}" Margin="10,5,5,5"></Label>
		
		<!-- FilteringList -->
		<ListBox Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Width="200" Height="200" ItemsSource="{Binding Filterings}" SelectedItem="{Binding FilteringSelectedItem}" HorizontalAlignment="Left" BorderThickness="0" Margin="5,0,0,0">
			<ListBox.ItemTemplate>
				<DataTemplate>
					<Label Content="{Binding DisplayValue}" Style="{StaticResource Item}" />
				</DataTemplate>
			</ListBox.ItemTemplate>
		</ListBox>

		<!-- GroupGrid -->
		<DataGrid Grid.Row="1" Grid.Column="2" ItemsSource="{Binding Groups}" AutoGenerateColumns="False" Height="200" Margin="5,0,0,0" BorderThickness="0">
			<DataGrid.Columns>
				<DataGridTextColumn Header="Group" Width="*"
									Binding="{Binding Title, StringFormat=D2}" />
				<DataGridTextColumn Header="Drive" Width="100"
									Binding="{Binding Drive}" />
				<DataGridTextColumn Header="Filesize" Width="100"
									Binding="{Binding Filesize}" />
				<DataGridTextColumn Header="Cnt" Width="50"
									Binding="{Binding Count}" />
				<DataGridTextColumn Header="☆" Width="35"
									Binding="{Binding IsFavorite}" />
				<DataGridTextColumn Header="E" Width="35"
									Binding="{Binding IsCompleted}" />
			</DataGrid.Columns>
		</DataGrid>
	</Grid>
</controls:MetroWindow>
