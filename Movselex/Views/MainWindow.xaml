<mui:ModernWindow x:Class="Movselex.Views.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
		xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
		xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
		xmlns:v="clr-namespace:Movselex.Views"
		xmlns:vm="clr-namespace:Movselex.ViewModels"
		xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
		xmlns:prop="clr-namespace:Movselex.Properties"
		xmlns:mui="http://firstfloorsoftware.com/ModernUI"
		xmlns:behaviors="clr-namespace:FinalstreamUIComponents.Behaviors;assembly=FinalstreamUIComponents"
		Title="Movselex" Height="600" Width="1100"
		WindowStartupLocation="CenterScreen"
		ContentSource="/Views/Pages/Home.xaml"
		Style="{StaticResource ModernWindowEx}" Icon="/Movselex;component/movselex.ico"  
		>

	<!--
	<Window.DataContext>
		<vm:MainWindowViewModel/>
	</Window.DataContext>
	-->
	

	<i:Interaction.Triggers>

		<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
		<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
		<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

		<!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
		<i:EventTrigger EventName="ContentRendered">
			<l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
		</i:EventTrigger>

		<!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
		<i:EventTrigger EventName="Closed">
			<l:DataContextDisposeAction/>
		</i:EventTrigger>

		<!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

	</i:Interaction.Triggers>

	<mui:ModernWindow.TitleLinks>
		<mui:Link DisplayName="settings" Source="/Views/Pages/SettingsPage.xaml" />
	</mui:ModernWindow.TitleLinks>

	
</mui:ModernWindow>
