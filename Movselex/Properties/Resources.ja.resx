<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfirmMessageDelete" xml:space="preserve">
    <value>{0}を削除します。よろしいですか？</value>
  </data>
  <data name="ConfirmMessageFileDelete" xml:space="preserve">
    <value>ファイルも削除します。よろしいですか？</value>
  </data>
  <data name="ConfirmMessageMove" xml:space="preserve">
    <value>{0} を {1} に移動します。よろしいですか？</value>
  </data>
  <data name="ConfirmMessageUnGroup" xml:space="preserve">
    <value>{0}のグループを解除します。よろしいですか？</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>削除</value>
  </data>
  <data name="EditGroup" xml:space="preserve">
    <value>グループ編集</value>
  </data>
  <data name="Grouping" xml:space="preserve">
    <value>グループ化</value>
  </data>
  <data name="MessageEditGroup" xml:space="preserve">
    <value>グループを編集します。</value>
  </data>
  <data name="MessageFatalError" xml:space="preserve">
    <value>不明なエラーが発生しました。アプリケーションを終了します。エラーログを開発元に送付してください。</value>
  </data>
  <data name="MessageMoveFile" xml:space="preserve">
    <value>移動する場所を指定してください。指定した場所にそのまま移動します。</value>
  </data>
  <data name="MessageMoveGroupDirectory" xml:space="preserve">
    <value>移動する場所を指定してください。指定した場所にグループ名でフォルダを作成して移動します。</value>
  </data>
  <data name="MessageRegistGroup" xml:space="preserve">
    <value>グループに登録します。</value>
  </data>
  <data name="MessageSelectedItems" xml:space="preserve">
    <value>選択した{0}つのアイテム</value>
  </data>
  <data name="MessageSelectMpcExe" xml:space="preserve">
    <value>MPC-HC.exeを指定してください。</value>
  </data>
  <data name="MessageUnknownError" xml:space="preserve">
    <value>不明なエラーが発生しました。エラーログを開発元に送付してください。</value>
  </data>
  <data name="MoveFile" xml:space="preserve">
    <value>ファイルを移動</value>
  </data>
  <data name="MoveGroupFiles" xml:space="preserve">
    <value>グループでファイルを移動</value>
  </data>
  <data name="OpenFolder" xml:space="preserve">
    <value>フォルダを開く</value>
  </data>
  <data name="UnGroup" xml:space="preserve">
    <value>グループ解除</value>
  </data>
  <data name="MessageAttentionMonitorDirectory" xml:space="preserve">
    <value>未指定の場合はデータベース内で最も登録数の多いディレクトリを監視します。</value>
  </data>
  <data name="EditLibrary" xml:space="preserve">
    <value>ライブラリ編集</value>
  </data>
  <data name="MessageEditLibrary" xml:space="preserve">
    <value>ライブラリを編集します。</value>
  </data>
  <data name="ConfirmMessageGroupDelete" xml:space="preserve">
    <value>グループに登録されているファイルも削除します。よろしいですか？</value>
  </data>
  <data name="DeleteGroup" xml:space="preserve">
    <value>グループ削除</value>
  </data>
</root>